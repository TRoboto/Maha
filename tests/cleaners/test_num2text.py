import pytest

from maha.cleaners.functions import numbers_to_text
from maha.parsers.functions import parse_dimension
from maha.parsers.utils import convert_to_number_if_possible


def assert_both_ways(input, expected, accusative=False):
    number = convert_to_number_if_possible(input)
    assert numbers_to_text(input, accusative) == expected
    # assert parse_dimension(expected, numeral=True)[0].value == number


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1", "واحد"),
        ("2", "إثنان"),
        ("3", "ثلاثة"),
        ("4", "أربعة"),
        ("5", "خمسة"),
        ("6", "ستة"),
        ("7", "سبعة"),
        ("8", "ثمانية"),
        ("9", "تسعة"),
    ],
)
def test_numbers_to_ten(input, expected):
    assert_both_ways(input, expected)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1", "واحد"),
        ("2", "إثنين"),
        ("3", "ثلاثة"),
        ("4", "أربعة"),
        ("5", "خمسة"),
        ("6", "ستة"),
        ("7", "سبعة"),
        ("8", "ثمانية"),
        ("9", "تسعة"),
    ],
)
def test_numbers_to_ten_accusative(input, expected):
    assert_both_ways(input, expected, accusative=True)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("11", "أحد عشر"),
        ("12", "إثنا عشر"),
        ("13", "ثلاثة عشر"),
        ("14", "أربعة عشر"),
        ("15", "خمسة عشر"),
        ("16", "ستة عشر"),
        ("17", "سبعة عشر"),
        ("18", "ثمانية عشر"),
        ("19", "تسعة عشر"),
    ],
)
def test_numbers_to_twenty(input, expected):
    assert_both_ways(input, expected)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("11", "أحد عشر"),
        ("12", "إثني عشر"),
        ("13", "ثلاثة عشر"),
        ("14", "أربعة عشر"),
        ("15", "خمسة عشر"),
        ("16", "ستة عشر"),
        ("17", "سبعة عشر"),
        ("18", "ثمانية عشر"),
        ("19", "تسعة عشر"),
    ],
)
def test_numbers_to_twenty_accusative(input, expected):
    assert_both_ways(input, expected, accusative=True)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("10", "عشرة"),
        ("20", "عشرون"),
        ("30", "ثلاثون"),
        ("40", "أربعون"),
        ("50", "خمسون"),
        ("60", "ستون"),
        ("70", "سبعون"),
        ("80", "ثمانون"),
        ("90", "تسعون"),
    ],
)
def test_perfect_tens(input, expected):
    assert_both_ways(input, expected)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("10", "عشرة"),
        ("20", "عشرين"),
        ("30", "ثلاثين"),
        ("40", "أربعين"),
        ("50", "خمسين"),
        ("60", "ستين"),
        ("70", "سبعين"),
        ("80", "ثمانين"),
        ("90", "تسعين"),
    ],
)
def test_perfect_tens_accusative(input, expected):
    assert_both_ways(input, expected, accusative=True)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("21", "واحد وعشرون"),
        ("22", "إثنان وعشرون"),
        ("23", "ثلاثة وعشرون"),
        ("31", "واحد وثلاثون"),
        ("42", "إثنان وأربعون"),
        ("88", "ثمانية وثمانون"),
        ("99", "تسعة وتسعون"),
    ],
)
def test_combined_tens(input, expected):
    assert_both_ways(input, expected)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("21", "واحد وعشرين"),
        ("22", "إثنين وعشرين"),
        ("23", "ثلاثة وعشرين"),
        ("31", "واحد وثلاثين"),
        ("42", "إثنين وأربعين"),
        ("88", "ثمانية وثمانين"),
        ("99", "تسعة وتسعين"),
    ],
)
def test_combined_tens_accusative(input, expected):
    assert_both_ways(input, expected, accusative=True)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("100", "مائة"),
        ("200", "مئتان"),
        ("300", "ثلاثمائة"),
        ("400", "أربعمائة"),
        ("500", "خمسمائة"),
        ("600", "ستمائة"),
        ("700", "سبعمائة"),
        ("800", "ثمانمائة"),
        ("900", "تسعمائة"),
    ],
)
def test_perfect_hundreds(input, expected):
    assert_both_ways(input, expected)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("100", "مائة"),
        ("200", "مئتين"),
        ("300", "ثلاثمائة"),
        ("400", "أربعمائة"),
        ("500", "خمسمائة"),
        ("600", "ستمائة"),
        ("700", "سبعمائة"),
        ("800", "ثمانمائة"),
        ("900", "تسعمائة"),
    ],
)
def test_perfect_hundreds_accusative(input, expected):
    assert_both_ways(input, expected, accusative=True)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("101", "مائة وواحد"),
        ("102", "مائة وإثنان"),
        ("103", "مائة وثلاثة"),
        ("110", "مائة وعشرة"),
        ("111", "مائة وأحد عشر"),
        ("112", "مائة وإثنا عشر"),
        ("113", "مائة وثلاثة عشر"),
        ("120", "مائة وعشرون"),
        ("121", "مائة وواحد وعشرون"),
        ("122", "مائة وإثنان وعشرون"),
        ("130", "مائة وثلاثون"),
        ("201", "مئتان وواحد"),
        ("202", "مئتان وإثنان"),
        ("210", "مئتان وعشرة"),
        ("211", "مئتان وأحد عشر"),
        ("220", "مئتان وعشرون"),
        ("222", "مئتان وإثنان وعشرون"),
        ("225", "مئتان وخمسة وعشرون"),
        ("250", "مئتان وخمسون"),
        ("301", "ثلاثمائة وواحد"),
        ("310", "ثلاثمائة وعشرة"),
        ("333", "ثلاثمائة وثلاثة وثلاثون"),
        ("888", "ثمانمائة وثمانية وثمانون"),
    ],
)
def test_combined_hundreds(input, expected):
    assert_both_ways(input, expected)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("101", "مائة وواحد"),
        ("102", "مائة وإثنين"),
        ("103", "مائة وثلاثة"),
        ("110", "مائة وعشرة"),
        ("111", "مائة وأحد عشر"),
        ("112", "مائة وإثني عشر"),
        ("113", "مائة وثلاثة عشر"),
        ("120", "مائة وعشرين"),
        ("121", "مائة وواحد وعشرين"),
        ("122", "مائة وإثنين وعشرين"),
        ("130", "مائة وثلاثين"),
        ("201", "مئتين وواحد"),
        ("202", "مئتين وإثنين"),
        ("210", "مئتين وعشرة"),
        ("211", "مئتين وأحد عشر"),
        ("220", "مئتين وعشرين"),
        ("222", "مئتين وإثنين وعشرين"),
        ("225", "مئتين وخمسة وعشرين"),
        ("250", "مئتين وخمسين"),
        ("301", "ثلاثمائة وواحد"),
        ("310", "ثلاثمائة وعشرة"),
        ("333", "ثلاثمائة وثلاثة وثلاثين"),
        ("888", "ثمانمائة وثمانية وثمانين"),
    ],
)
def test_combined_hundreds_accusative(input, expected):
    assert_both_ways(input, expected, accusative=True)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1000", "ألف"),
        ("2000", "ألفان"),
        ("3000", "ثلاثة آلاف"),
        ("4000", "أربعة آلاف"),
        ("5000", "خمسة آلاف"),
        ("6000", "ستة آلاف"),
        ("7000", "سبعة آلاف"),
        ("8000", "ثمانية آلاف"),
        ("9000", "تسعة آلاف"),
        ("10000", "عشرة آلاف"),
        ("20000", "عشرون ألف"),
        ("30000", "ثلاثون ألف"),
        ("40000", "أربعون ألف"),
        ("50000", "خمسون ألف"),
        ("60000", "ستون ألف"),
        ("70000", "سبعون ألف"),
        ("80000", "ثمانون ألف"),
        ("90000", "تسعون ألف"),
        ("100000", "مائة ألف"),
        ("200000", "مئتان ألف"),
        ("300000", "ثلاثمائة ألف"),
        ("400000", "أربعمائة ألف"),
        ("500000", "خمسمائة ألف"),
        ("600000", "ستمائة ألف"),
        ("700000", "سبعمائة ألف"),
        ("800000", "ثمانمائة ألف"),
        ("900000", "تسعمائة ألف"),
    ],
)
def test_perfect_thousands(input, expected):
    assert_both_ways(input, expected)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1000", "ألف"),
        ("2000", "ألفين"),
        ("3000", "ثلاثة آلاف"),
        ("4000", "أربعة آلاف"),
        ("5000", "خمسة آلاف"),
        ("6000", "ستة آلاف"),
        ("7000", "سبعة آلاف"),
        ("8000", "ثمانية آلاف"),
        ("9000", "تسعة آلاف"),
        ("10000", "عشرة آلاف"),
        ("20000", "عشرين ألف"),
        ("30000", "ثلاثين ألف"),
        ("40000", "أربعين ألف"),
        ("50000", "خمسين ألف"),
        ("60000", "ستين ألف"),
        ("70000", "سبعين ألف"),
        ("80000", "ثمانين ألف"),
        ("90000", "تسعين ألف"),
        ("100000", "مائة ألف"),
        ("200000", "مئتين ألف"),
        ("300000", "ثلاثمائة ألف"),
        ("400000", "أربعمائة ألف"),
        ("500000", "خمسمائة ألف"),
        ("600000", "ستمائة ألف"),
        ("700000", "سبعمائة ألف"),
        ("800000", "ثمانمائة ألف"),
        ("900000", "تسعمائة ألف"),
    ],
)
def test_perfect_thousands_accusative(input, expected):
    assert_both_ways(input, expected, accusative=True)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1001", "ألف وواحد"),
        ("1002", "ألف وإثنان"),
        ("1003", "ألف وثلاثة"),
        ("1010", "ألف وعشرة"),
        ("1011", "ألف وأحد عشر"),
        ("1020", "ألف وعشرون"),
        ("1022", "ألف وإثنان وعشرون"),
        ("1025", "ألف وخمسة وعشرون"),
        ("1050", "ألف وخمسون"),
        ("1053", "ألف وثلاثة وخمسون"),
        ("1100", "ألف ومائة"),
        ("1200", "ألف ومئتان"),
        ("1300", "ألف وثلاثمائة"),
        ("10001", "عشرة آلاف وواحد"),
        ("10101", "عشرة آلاف ومائة وواحد"),
        ("11008", "أحد عشر ألف وثمانية"),
        ("11019", "أحد عشر ألف وتسعة عشر"),
        ("11100", "أحد عشر ألف ومائة"),
        ("11111", "أحد عشر ألف ومائة وأحد عشر"),
        ("88888", "ثمانية وثمانون ألف وثمانمائة وثمانية وثمانون"),
        ("99,000", "تسعة وتسعون ألف"),
        ("99,900", "تسعة وتسعون ألف وتسعمائة"),
        ("99,990", "تسعة وتسعون ألف وتسعمائة وتسعون"),
        ("99,999", "تسعة وتسعون ألف وتسعمائة وتسعة وتسعون"),
    ],
)
def test_combined_thousands(input, expected):
    assert_both_ways(input, expected)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1001", "ألف وواحد"),
        ("1002", "ألف وإثنين"),
        ("1003", "ألف وثلاثة"),
        ("1010", "ألف وعشرة"),
        ("1011", "ألف وأحد عشر"),
        ("1020", "ألف وعشرين"),
        ("1022", "ألف وإثنين وعشرين"),
        ("1025", "ألف وخمسة وعشرين"),
        ("1050", "ألف وخمسين"),
        ("1053", "ألف وثلاثة وخمسين"),
        ("1100", "ألف ومائة"),
        ("1200", "ألف ومئتين"),
        ("1300", "ألف وثلاثمائة"),
        ("10001", "عشرة آلاف وواحد"),
        ("10101", "عشرة آلاف ومائة وواحد"),
        ("11008", "أحد عشر ألف وثمانية"),
        ("11019", "أحد عشر ألف وتسعة عشر"),
        ("11100", "أحد عشر ألف ومائة"),
        ("11111", "أحد عشر ألف ومائة وأحد عشر"),
        ("88888", "ثمانية وثمانين ألف وثمانمائة وثمانية وثمانين"),
        ("99,000", "تسعة وتسعين ألف"),
        ("99,900", "تسعة وتسعين ألف وتسعمائة"),
        ("99,990", "تسعة وتسعين ألف وتسعمائة وتسعين"),
        ("99,999", "تسعة وتسعين ألف وتسعمائة وتسعة وتسعين"),
    ],
)
def test_combined_thousands_accusative(input, expected):
    assert_both_ways(input, expected, accusative=True)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1,000,000", "مليون"),
        ("2,000,000", "مليونان"),
        ("3,000,000", "ثلاثة ملايين"),
        ("4,000,000", "أربعة ملايين"),
        ("8,000,000", "ثمانية ملايين"),
        ("9,000,000", "تسعة ملايين"),
        ("10,000,000", "عشرة ملايين"),
        ("11,000,000", "أحد عشر مليون"),
        ("12,000,000", "إثنا عشر مليون"),
        ("20,000,000", "عشرون مليون"),
        ("21,000,000", "واحد وعشرون مليون"),
        ("22,000,000", "إثنان وعشرون مليون"),
        ("23,000,000", "ثلاثة وعشرون مليون"),
        ("30,000,000", "ثلاثون مليون"),
        ("100,000,000", "مائة مليون"),
        ("200,000,000", "مئتان مليون"),
        ("300,000,000", "ثلاثمائة مليون"),
        ("800,000,000", "ثمانمائة مليون"),
        ("900,000,000", "تسعمائة مليون"),
    ],
)
def test_perfect_millions(input, expected):
    assert numbers_to_text(input) == expected


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1,000,000", "مليون"),
        ("2,000,000", "مليونين"),
        ("3,000,000", "ثلاثة ملايين"),
        ("4,000,000", "أربعة ملايين"),
        ("8,000,000", "ثمانية ملايين"),
        ("9,000,000", "تسعة ملايين"),
        ("10,000,000", "عشرة ملايين"),
        ("11,000,000", "أحد عشر مليون"),
        ("12,000,000", "إثني عشر مليون"),
        ("20,000,000", "عشرين مليون"),
        ("21,000,000", "واحد وعشرين مليون"),
        ("22,000,000", "إثنين وعشرين مليون"),
        ("23,000,000", "ثلاثة وعشرين مليون"),
        ("30,000,000", "ثلاثين مليون"),
        ("100,000,000", "مائة مليون"),
        ("200,000,000", "مئتين مليون"),
        ("300,000,000", "ثلاثمائة مليون"),
        ("800,000,000", "ثمانمائة مليون"),
        ("900,000,000", "تسعمائة مليون"),
    ],
)
def test_perfect_millions_accusative(input, expected):
    assert_both_ways(input, expected, accusative=True)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1,000,001", "مليون وواحد"),
        ("1,000,002", "مليون وإثنان"),
        ("1,000,008", "مليون وثمانية"),
        ("1,000,010", "مليون وعشرة"),
        ("1,000,011", "مليون وأحد عشر"),
        ("1,000,100", "مليون ومائة"),
        ("1,000,101", "مليون ومائة وواحد"),
        ("1,000,110", "مليون ومائة وعشرة"),
        ("1,000,111", "مليون ومائة وأحد عشر"),
        ("1,001,000", "مليون وألف"),
        ("1,001,001", "مليون وألف وواحد"),
        ("1,001,010", "مليون وألف وعشرة"),
        ("1,001,011", "مليون وألف وأحد عشر"),
        ("1,001,100", "مليون وألف ومائة"),
        ("1,001,101", "مليون وألف ومائة وواحد"),
        ("1,001,110", "مليون وألف ومائة وعشرة"),
        ("1,001,110", "مليون وألف ومائة وعشرة"),
        ("1,001,111", "مليون وألف ومائة وأحد عشر"),
        ("1,010,101", "مليون وعشرة آلاف ومائة وواحد"),
        ("10,011,101", "عشرة ملايين وأحد عشر ألف ومائة وواحد"),
        ("111,111,111", "مائة وأحد عشر مليون ومائة وأحد عشر ألف ومائة وأحد عشر"),
        ("2,000,001", "مليونان وواحد"),
        ("2,000,002", "مليونان وإثنان"),
        ("2,000,008", "مليونان وثمانية"),
    ],
)
def test_combined_millions(input, expected):
    assert_both_ways(input, expected)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1,000,001", "مليون وواحد"),
        ("1,000,002", "مليون وإثنين"),
        ("1,000,008", "مليون وثمانية"),
        ("1,000,010", "مليون وعشرة"),
        ("1,000,011", "مليون وأحد عشر"),
        ("1,000,100", "مليون ومائة"),
        ("1,000,101", "مليون ومائة وواحد"),
        ("1,000,110", "مليون ومائة وعشرة"),
        ("1,000,111", "مليون ومائة وأحد عشر"),
        ("1,001,000", "مليون وألف"),
        ("1,001,001", "مليون وألف وواحد"),
        ("1,001,010", "مليون وألف وعشرة"),
        ("1,001,011", "مليون وألف وأحد عشر"),
        ("1,001,100", "مليون وألف ومائة"),
        ("1,001,101", "مليون وألف ومائة وواحد"),
        ("1,001,110", "مليون وألف ومائة وعشرة"),
        ("1,001,110", "مليون وألف ومائة وعشرة"),
        ("1,001,111", "مليون وألف ومائة وأحد عشر"),
        ("1,010,101", "مليون وعشرة آلاف ومائة وواحد"),
        ("10,011,101", "عشرة ملايين وأحد عشر ألف ومائة وواحد"),
        ("111,111,111", "مائة وأحد عشر مليون ومائة وأحد عشر ألف ومائة وأحد عشر"),
        ("2,000,001", "مليونين وواحد"),
        ("2,000,002", "مليونين وإثنين"),
        ("2,000,008", "مليونين وثمانية"),
    ],
)
def test_combined_millions_accusative(input, expected):
    assert_both_ways(input, expected, accusative=True)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("1,000,000,000", "مليار"),
        ("1,000,000,001", "مليار وواحد"),
        ("2,000,000,000", "ملياران"),
        ("8,000,000,000", "ثمانية مليارات"),
        ("10,000,000,000", "عشرة مليارات"),
        ("11,000,000,000", "أحد عشر مليار"),
        ("20,000,000,000", "عشرون مليار"),
        ("22,000,000,000", "إثنان وعشرون مليار"),
        ("21,000,000,000", "واحد وعشرون مليار"),
        ("30,000,000,000", "ثلاثون مليار"),
        ("100,000,000,000", "مائة مليار"),
        ("110,000,000,000", "مائة وعشرة مليار"),
        ("100,100,100,100", "مائة مليار ومائة مليون ومائة ألف ومائة"),
        ("010,010,010,010", "عشرة مليارات وعشرة ملايين وعشرة آلاف وعشرة"),
        (
            "2,222,222,222",
            "ملياران ومئتان وإثنان وعشرون مليون ومئتان وإثنان وعشرون ألف ومئتان وإثنان وعشرون",
        ),
    ],
)
def test_trillions_and_more(input, expected):
    assert_both_ways(input, expected)


@pytest.mark.parametrize(
    "input, expected",
    [
        ("50.0", "خمسون"),
        ("50.1", "خمسون فاصلة واحد"),
        ("1.20", "واحد فاصلة إثنان"),
        ("00001.200000", "واحد فاصلة إثنان"),
        ("10001.200001", "عشرة آلاف وواحد فاصلة مئتان ألف وواحد"),
        ("1.01", "واحد فاصلة واحد من مائة"),
        ("1.001", "واحد فاصلة واحد من ألف"),
        ("1.0001", "واحد فاصلة واحد من عشرة آلاف"),
        ("1.00001", "واحد فاصلة واحد من مائة ألف"),
        ("1.000001", "واحد فاصلة واحد من مليون"),
        ("1.0000001", "واحد فاصلة واحد من عشرة ملايين"),
        ("1.000000001", "واحد فاصلة واحد من مليار"),
        ("0.1", "واحد من عشرة"),
        ("1.1", "واحد فاصلة واحد"),
        ("1.01", "واحد فاصلة واحد من مائة"),
        ("0.01", "واحد من مائة"),
        ("0.001", "واحد من ألف"),
        ("0.0010", "واحد من ألف"),
        ("0.0010000", "واحد من ألف"),
        ("0.00101", "مائة وواحد من مائة ألف"),
        ("0.011", "أحد عشر من ألف"),
        ("100.232", "مائة فاصلة مئتان وإثنان وثلاثون"),
    ],
)
def test_decimals(input, expected):
    assert_both_ways(input, expected)


def test_numbers_in_text():
    assert numbers_to_text("كان عدد الكتب 150 كتاب") == "كان عدد الكتب مائة وخمسون كتاب"
    assert (
        numbers_to_text("كان عدد الكتب 150 كتاب ل3 أشخاص")
        == "كان عدد الكتب مائة وخمسون كتاب لثلاثة أشخاص"
    )
